#include <iostream>
#include <cmath>
#define MAX 401

struct Node {
    int id;
    int layer_id;
    double phi_index_phi; // double phi
    double z_index_r; // double r
    double x; 
    double y; 
    double z;
    int n_nodes;
};
struct Node temp;
void printNode(struct Node input) {
    printf("\n(%d, %d, %.3f, %.3f, %.3f, %.3f, %.3f, %d) ", 
        input.id, input.layer_id, input.phi_index_phi, input.z_index_r,
        input.x, input.y, input.z, input.n_nodes
        );
}
void printIntArray(int* input, int n) {
    for(int i = 0; i < n;i++) {
        printf("%d ", input[i]);
    }
}
void printNodeArray(struct Node* input, int n) {
    for(int i = 0; i < n;i++) {
        printNode(input[i]);
    }
}
double getDphi(double phi_0, double phi_1) {
    double dphi = phi_1 - phi_0;
    if (dphi > M_PI)
        return dphi - 2 * M_PI;
    else if (dphi < -M_PI)
        return dphi + 2 * M_PI;
    else   
        return dphi;
}
void copyNode(struct Node* nodeTo, struct Node nodeFrom) {
   nodeTo->id = nodeFrom.id;
   nodeTo->layer_id = nodeFrom.layer_id;
   nodeTo->phi_index_phi = nodeFrom.phi_index_phi;
   nodeTo->z_index_r = nodeFrom.z_index_r;
   nodeTo->x = nodeFrom.x;
   nodeTo->y = nodeFrom.y;
   nodeTo->z = nodeFrom.z;
   nodeTo->n_nodes = nodeFrom.n_nodes;
}
void swapNode(struct Node* nodes, int i, int j) {
  copyNode(&temp, nodes[i]);
  copyNode(&(nodes[i]), nodes[j]);
  copyNode(&(nodes[j]), temp);
}

void resetNodeIndex(struct Node* nodes, int n) {
  for (int i = 0; i < n; i++) {
      nodes[i].id = i;
  }
}
void getAdjancyMatrix(int adjMatrix[MAX][MAX], struct Node input[MAX], int n) {
    for (int i = 0; i < n; i++) {
        struct Node node_iter_i;
        copyNode(&node_iter_i, input[i]);
        struct Node node_iter_j;
        for (int j = 0; j < n; j++) {
            if (i == j)
                continue;
            copyNode(&node_iter_j, input[j]);
            if (node_iter_i.layer_id == node_iter_j.layer_id
                && abs(node_iter_i.phi_index_phi - node_iter_j.phi_index_phi) <= 2
                && abs(node_iter_i.z_index_r - node_iter_j.z_index_r) <= 2) {
                adjMatrix[i][j] = 1;
            }
        }
    }
}
void getAdjancyList(int adjMatrix[MAX][MAX], struct Node input[MAX], int n) {
    int adjListIndex;
    for (int i = 0; i < n; i++) {
        adjListIndex = 0;
        for (int j = 0; j < n; j++) {
            if (adjMatrix[i][j] == 1)
                adjMatrix[i][adjListIndex++] = j;
        }
        for (int j = adjListIndex; j < n; j++) {
             adjMatrix[i][j] = -1;
        }
    }
}

int appendNeighbour(struct Node output[MAX], struct Node input[MAX], int adjList[MAX][MAX], int marked[MAX], int i_node, int i_next, int num_hits) {
    for (int i = 0; i < num_hits ; i++) {
        int idx = adjList[i_node][i];
        if (idx == -1)
            break;
        if (marked[idx] == -1) {
            marked[idx] = marked[i_node];
            copyNode(&(output[i_next++]), input[idx]);
        }
    }
    return i_next;
}
void getCluster(struct Node output[MAX], int root_index[MAX], struct Node input[MAX], int adjList[MAX][MAX], int marked[MAX], int num_hits) {
    int ptr_cluster = 0;
    int ptr_cluster_queue = 0;
    int ptr_next = 0;
    int ptr_root = 0;
    while (ptr_cluster < num_hits) {
        if (marked[ptr_cluster] == -1) {
            marked[ptr_cluster] = ptr_cluster;
            root_index[ptr_root++] = ptr_next;
            copyNode(&(output[ptr_next++]), input[ptr_cluster]);
            ptr_next = appendNeighbour(output, input, adjList, marked, ptr_cluster, ptr_next, num_hits);
            ptr_cluster_queue = ptr_cluster + 1;
            while (ptr_cluster_queue < num_hits && output[ptr_cluster_queue].id != -1) {
                ptr_next = appendNeighbour(output, input, adjList, marked, output[ptr_cluster_queue].id, ptr_next, num_hits);
                ptr_cluster_queue++;
            }
        }
        ptr_cluster++;
    }
}
void initialize(double keys[MAX][6], struct Node input[MAX], struct Node output[MAX], int adj[MAX][MAX], int marked[MAX], int rootIndex[MAX], int* layer_cnt, int* layer_begin_idx, int** edge_pair, int num_layers) {
    
    for (int i = 0; i < MAX; i++) {
        input[i].id = i;
        input[i].layer_id = keys[i][0];
        input[i].phi_index_phi = keys[i][1];
        input[i].z_index_r = keys[i][2];
        input[i].x = keys[i][3];
        input[i].y = keys[i][4];
        input[i].z = keys[i][5];
        input[i].n_nodes = 0;
        output[i].id = -1;
        output[i].layer_id = -1;
        output[i].phi_index_phi = 0;
        output[i].z_index_r = 0;
        output[i].x = 0;
        output[i].y = 0;
        output[i].z = 0;
        output[i].n_nodes = 0;
        marked[i] = -1;
        rootIndex[i] = -1;
        for (int j = 0; j < MAX; j++) {
            adj[i][j] = 0;
        }
    }
    
    for (int i = 0; i < 1000; i++) {
        edge_pair[i] = new int[2];
        edge_pair[i][0] = 0;
        edge_pair[i][1] = 0;
    }
    
    for (int i = 0; i < num_layers*2; i++) {
        layer_cnt[i] = 0;
        layer_begin_idx[i] = 0;
    }
    layer_begin_idx[num_layers * 2 + 1] = 0;
}
void initializeIntArray(int* input, int n, int init_val) {
    for (int i = 0; i < n; i++) {
        input[i] = init_val;
    }
}
void compare(int expected[MAX], int marked[MAX]) {
    printf("\nDifferences: ");
    for (int i = 0; i < MAX; i++) {
        if (expected[i] != marked[i])
            printf("%d ", i);
    }
    printf("Done");
}
void getClusteredNodes(struct Node* output, int* root_index, int num_hits, int num_layer) {
    int root_iter = root_index[0];
    int root_iter_next = root_index[1];
    int node_iter = 0;
    int num_nodes = 0;

    while (node_iter < num_hits) {
        if (node_iter == root_index[root_iter]) {
            output[root_iter].id = root_iter;
            output[root_iter].layer_id = output[node_iter].layer_id;
            output[root_iter].x = output[node_iter].x;
            output[root_iter].y = output[node_iter].y;
            output[root_iter].z = output[node_iter].z;
            output[root_iter].phi_index_phi = -1;
            output[root_iter].z_index_r = -1;
        }
        else {
            output[root_iter].x += output[node_iter].x;
            output[root_iter].y += output[node_iter].y;
            output[root_iter].z += output[node_iter].z;
        }

        node_iter++;
        if (node_iter == root_index[root_iter+1]) {
            num_nodes = root_index[root_iter+1] - root_index[root_iter];
            output[root_iter].x /=  num_nodes;
            output[root_iter].y /=  num_nodes;
            output[root_iter].z /=  num_nodes;
            output[root_iter].n_nodes =  num_nodes;
            root_iter++;
        }
    }

    num_nodes = num_hits - root_index[root_iter];
    output[root_iter].x /=  num_nodes;
    output[root_iter].y /=  num_nodes;
    output[root_iter].z /=  num_nodes;
    output[root_iter].n_nodes =  num_nodes;

    for (int i = 0; i <= root_iter; i++) {
        output[i].z_index_r = sqrt(output[i].x * output[i].x + output[i].y * output[i].y);
        output[i].phi_index_phi = atan2(output[i].y, output[i].x);
    }
}
void sortByLayer(struct Node* input, int* layer_begin_idx, int* layer_cnt, int num_layers, int num_clusters) {
    for (int i = 0; i < num_clusters; i++) {
        layer_cnt[input[i].layer_id]++;
    }

    int layer_iter[num_layers];
    layer_iter[0] = 0;
    layer_begin_idx[0] = 0;
    layer_begin_idx[num_layers] = num_clusters;
    for (int i = 0; i < num_layers; i++) {
        if (i > 0)
            layer_begin_idx[i] = layer_begin_idx[i-1] + layer_cnt[i-1];

        layer_iter[i] = layer_begin_idx[i];
        for (int j = 0; j < layer_cnt[i]; j++) {
            if (input[layer_begin_idx[i] + j].layer_id != i)
                break;
            layer_iter[i]++;
        }
    }

    for (int i = 0; i < num_layers; i++) {
        for (int j = layer_iter[i]; j < layer_begin_idx[i + 1]; j++) {
            while (input[j].layer_id != i) {
                swapNode(input, j, layer_iter[input[j].layer_id]++);
            }
        }
    }
}
int getSegments(int* edge_pair[2], struct Node* output, int* indexes_layers, int layer_0, int layer_1, double phi_slope_max, double z0_max, int edge_pair_iter) {
    for (int i = indexes_layers[layer_0]; i < indexes_layers[layer_0 + 1]; i++) {
        for (int j = indexes_layers[layer_1]; j < indexes_layers[layer_1 + 1]; j++) {
            double dphi = getDphi(output[i].phi_index_phi, output[j].phi_index_phi);
            double dz = output[j].z - output[i].z;
            double dr = output[j].z_index_r - output[i].z_index_r;
            double phi_slope = dphi / dr;
            double z0 = output[i].z - output[i].z_index_r * dz / dr;
            
            if ((fabs(phi_slope) < phi_slope_max) && (fabs(z0) < z0_max)) {
                edge_pair[edge_pair_iter][0] = i;
                edge_pair[edge_pair_iter][1] = j;
                edge_pair_iter++;
            }
        }
    }
    return edge_pair_iter;
}
int getEdgeIndex(int** edge_pair, struct Node* output, int* indexes_layers, int num_layers) {
    int edge_pair_iter = 0;
    for (int i = 0; i < num_layers * 2; i++) {
        for (int j = i + 1; j < ((int)(i/2) + 2) * 2 && j < num_layers * 2; j++) {
            // printf("\n%d %d", i, j);
            edge_pair_iter = getSegments(edge_pair, output, indexes_layers, i, j, 0.1, 200, edge_pair_iter);
        }
    }
    return edge_pair_iter;
}

void featureScale(struct Node* input, int n) {
    for (int i = 0; i < n; i++) {
        input[i].phi_index_phi /= M_PI;
        input[i].z_index_r /= (double)10;
        input[i].z /= (double)10;
    }
}

void printNodesWithSelectedFeatures(struct Node* input, int n) {
    printf("\nr, phi, z, n_hits: ");
    for (int i = 0; i < n; i++) {
        printf("\n(%d, %.3f, %.3f, %.3f, %d) ", 
            input[i].id, input[i].z_index_r, input[i].phi_index_phi, input[i].z, input[i].n_nodes
        );
    }
}

void printEdgePairs(int** edge_pair, int num_edge_pairs) {
    printf("\n%d edge pairs: ", num_edge_pairs);
    for (int i = 0; i < num_edge_pairs; i++) {
        printf("\n(%d, %d)", 
            edge_pair[i][0], edge_pair[i][1]);
    }
}

int main() {
    double keys[MAX][6] = {
        {0,1675,3266,-0.2682281815579182,2.3823189818435706,-3.6975000000000002}, {0,1675,3267,-0.2682281815579182,2.3823189818435706,-3.6945}, {0,1676,3266,-0.27109419102529503,2.3814324212235864,-3.6975000000000002}, {0,1676,3267,-0.27109419102529503,2.3814324212235864,-3.6945}, {0,1729,3295,-0.42299269279626645,2.3344447083644337,-3.6105}, {0,1729,3296,-0.42299269279626645,2.3344447083644337,-3.6075}, {0,1729,3297,-0.42299269279626645,2.3344447083644337,-3.6045}, {0,1730,3295,-0.42585870226364325,2.3335581477444496,-3.6105}, {0,1730,3296,-0.42585870226364325,2.3335581477444496,-3.6075}, {0,1730,3297,-0.42585870226364325,2.3335581477444496,-3.6045}, {0,1226,4581,0.9325392158356801,2.2032498354064565,0.2715}, {0,1226,4582,0.9325392158356801,2.2032498354064565,0.2745}, {0,1227,4581,0.9296138985194531,2.203915056121244,0.2715}, {0,1227,4582,0.9296138985194531,2.203915056121244,0.2745}, {0,4120,3450,-0.5054428876665329,-2.300372059765412,-3.1455}, {0,4120,3451,-0.5054428876665329,-2.300372059765412,-3.1425}, {0,4121,3450,-0.5025175703503058,-2.3010372804801995,-3.1455}, {0,4121,3451,-0.5025175703503058,-2.3010372804801995,-3.1425}, {0,4121,3452,-0.5025175703503058,-2.3010372804801995,-3.1395}, {1,2760,5737,-2.639421561638936,0.5629145639813592,3.7605}, {1,2760,5738,-2.639421561638936,0.5629145639813592,3.7635}, {1,2760,5739,-2.639421561638936,0.5629145639813592,3.7665}, {1,2761,5737,-2.6385350010189517,0.5600485545139823,3.7605}, {1,2761,5738,-2.6385350010189517,0.5600485545139823,3.7635}, {1,2761,5739,-2.6385350010189517,0.5600485545139823,3.7665}, {1,5254,8048,2.140053867501656,-1.21044436087725,10.7535}, {1,5254,8049,2.140053867501656,-1.21044436087725,10.7565}, {1,5254,8050,2.140053867501656,-1.21044436087725,10.759500000000001}, {1,5254,8051,2.140053867501656,-1.21044436087725,10.762500000000001}, {1,5254,8052,2.140053867501656,-1.21044436087725,10.765500000000001}, {1,5255,8048,2.1407190882164433,-1.207519043561023,10.7535}, {1,5255,8049,2.1407190882164433,-1.207519043561023,10.7565}, {1,5255,8050,2.1407190882164433,-1.207519043561023,10.759500000000001}, {1,5255,8051,2.1407190882164433,-1.207519043561023,10.762500000000001}, {1,5255,8052,2.1407190882164433,-1.207519043561023,10.765500000000001}, {1,1126,3985,1.2279962647746114,2.1360625432129323,-1.5375}, {1,1126,3986,1.2279962647746114,2.1360625432129323,-1.5345}, {1,1127,3985,1.2250709474583843,2.13672776392772,-1.5375}, {1,1127,3986,1.2250709474583843,2.13672776392772,-1.5345}, {0,4850,4294,1.3602504525783121,-1.9972591187457256,-0.5924999999999999}, {0,4850,4295,1.3602504525783121,-1.9972591187457256,-0.5894999999999999}, {0,4851,4294,1.362289209274555,-1.9950583299931361,-0.5924999999999999}, {0,4851,4295,1.362289209274555,-1.9950583299931361,-0.5894999999999999}, {0,4852,4294,1.364327965970798,-1.9928575412405467,-0.5924999999999999}, {0,4852,4295,1.364327965970798,-1.9928575412405467,-0.5894999999999999}, {0,5477,3770,2.2890633076140268,-0.5551732820423927,-2.1825}, {0,5477,3771,2.2890633076140268,-0.5551732820423927,-2.1795}, {0,5478,3770,2.2897285283288142,-0.5522479647261658,-2.1825}, {0,5478,3771,2.2897285283288142,-0.5522479647261658,-2.1795}, {0,5479,3770,2.2903937490436013,-0.5493226474099385,-2.1825}, {0,5479,3771,2.2903937490436013,-0.5493226474099385,-2.1795}, {0,1354,3842,0.5580985993586188,2.2883980868992397,-1.9665000000000001}, {0,1354,3843,0.5580985993586188,2.2883980868992397,-1.9635}, {0,1355,3842,0.5551732820423917,2.289063307614027,-1.9665000000000001}, {0,1355,3843,0.5551732820423917,2.289063307614027,-1.9635}, {0,1356,3842,0.5522479647261648,2.2897285283288142,-1.9665000000000001}, {0,1356,3843,0.5522479647261648,2.2897285283288142,-1.9635}, {1,1601,2858,-0.053277471504656865,2.4488110283423716,-4.939500000000001}, {1,1601,2859,-0.053277471504656865,2.4488110283423716,-4.9365000000000006}, {1,1601,2860,-0.053277471504656865,2.4488110283423716,-4.9335}, {1,1602,2858,-0.056143480972033685,2.447924467722388,-4.939500000000001}, {1,1602,2859,-0.056143480972033685,2.447924467722388,-4.9365000000000006}, {1,1602,2860,-0.056143480972033685,2.447924467722388,-4.9335}, {1,2848,1804,-2.561404227080342,0.31070573085219916,-8.1225}, {1,2848,1805,-2.561404227080342,0.31070573085219916,-8.1195}, {1,2848,1806,-2.561404227080342,0.31070573085219916,-8.1165}, {1,2849,1804,-2.560517666460358,0.30783972138482235,-8.1225}, {1,2849,1805,-2.560517666460358,0.30783972138482235,-8.1195}, {1,2849,1806,-2.560517666460358,0.30783972138482235,-8.1165}, {1,2850,1805,-2.5596311058403742,0.30497371191744554,-8.1195}, {1,2850,1806,-2.5596311058403742,0.30497371191744554,-8.1165}, {0,359,3232,2.3308984658844976,0.43445673066577384,-3.7995}, {0,359,3233,2.3308984658844976,0.43445673066577384,-3.7965}, {0,360,3232,2.3300119052645134,0.43732274013315064,-3.7995}, {0,360,3233,2.3300119052645134,0.43732274013315064,-3.7965}, {0,361,3232,2.3291253446445292,0.4401887496005275,-3.7995}, {0,361,3233,2.3291253446445292,0.4401887496005275,-3.7965}, {1,4277,4143,-0.15307521014647435,-2.512643392981221,-1.0455}, {1,4277,4144,-0.15307521014647435,-2.512643392981221,-1.0425}, {1,4278,4143,-0.15020920067909752,-2.511756832361237,-1.0455}, {1,4278,4144,-0.15020920067909752,-2.511756832361237,-1.0425}, {1,4279,4143,-0.1473431912117207,-2.510870271741253,-1.0455}, {1,4279,4144,-0.1473431912117207,-2.510870271741253,-1.0425}, {0,433,3994,2.26529298000568,0.6465414312516583,-1.4925000000000002}, {0,433,3995,2.26529298000568,0.6465414312516583,-1.4895}, {0,434,3994,2.264406419385696,0.6494074407190351,-1.4925000000000002}, {0,434,3995,2.264406419385696,0.6494074407190351,-1.4895}, {0,2235,417,-1.6314050931786352,1.7045542146513277,-12.307500000000001}, {0,2235,418,-1.6314050931786352,1.7045542146513277,-12.3045}, {0,2235,419,-1.6314050931786352,1.7045542146513277,-12.3015}, {0,2235,420,-1.6314050931786352,1.7045542146513277,-12.2985}, {0,2236,416,-1.6334438498748782,1.7023534258987383,-12.310500000000001}, {0,2236,417,-1.6334438498748782,1.7023534258987383,-12.307500000000001}, {0,2236,418,-1.6334438498748782,1.7023534258987383,-12.3045}, {0,2236,419,-1.6334438498748782,1.7023534258987383,-12.3015}, {0,2236,420,-1.6334438498748782,1.7023534258987383,-12.2985}, {0,2237,417,-1.6354826065711214,1.7001526371461488,-12.307500000000001}, {0,2237,418,-1.6354826065711214,1.7001526371461488,-12.3045}, {0,2237,419,-1.6354826065711214,1.7001526371461488,-12.3015}, {0,2237,420,-1.6354826065711214,1.7001526371461488,-12.2985}, {0,3132,1957,-2.308734450384897,-0.506106967350194,-7.6635}, {0,3132,1958,-2.308734450384897,-0.506106967350194,-7.6605}, {0,3132,1959,-2.308734450384897,-0.506106967350194,-7.6575}, {0,3132,1960,-2.308734450384897,-0.506106967350194,-7.6545}, {0,3133,1957,-2.307847889764913,-0.5089729768175709,-7.6635}, {0,3133,1958,-2.307847889764913,-0.5089729768175709,-7.6605}, {0,3133,1959,-2.307847889764913,-0.5089729768175709,-7.6575}, {0,3133,1960,-2.307847889764913,-0.5089729768175709,-7.6545}, {0,3962,3006,-0.9676430236304054,-2.1952671868290077,-4.4775}, {0,3962,3007,-0.9676430236304054,-2.1952671868290077,-4.4745}, {0,3962,3008,-0.9676430236304054,-2.1952671868290077,-4.471500000000001}, {0,3963,3006,-0.9647177063141785,-2.195932407543795,-4.4775}, {0,3963,3007,-0.9647177063141785,-2.195932407543795,-4.4745}, {0,3963,3008,-0.9647177063141785,-2.195932407543795,-4.471500000000001}, {1,3697,4862,-1.7457774297467985,-2.0183184766955673,1.1145}, {1,3697,4863,-1.7457774297467985,-2.0183184766955673,1.1175000000000002}, {1,3698,4861,-1.7428521124305716,-2.0189836974103548,1.1115000000000002}, {1,3698,4862,-1.7428521124305716,-2.0189836974103548,1.1145}, {1,3698,4863,-1.7428521124305716,-2.0189836974103548,1.1175000000000002}, {1,3699,4862,-1.7399267951143442,-2.0196489181251422,1.1145}, {1,3699,4863,-1.7399267951143442,-2.0196489181251422,1.1175000000000002}, {1,4712,4192,1.0768632718005315,-2.303168755355659,-0.8985}, {1,4712,4193,1.0768632718005315,-2.303168755355659,-0.8955}, {1,4712,4194,1.0768632718005315,-2.303168755355659,-0.8925}, {1,4713,4192,1.0789020284967745,-2.3009679666030696,-0.8985}, {1,4713,4193,1.0789020284967745,-2.3009679666030696,-0.8955}, {1,4713,4194,1.0789020284967745,-2.3009679666030696,-0.8925}, {1,4714,4192,1.0809407851930175,-2.29876717785048,-0.8985}, {1,4714,4193,1.0809407851930175,-2.29876717785048,-0.8955}, {2,2252,3034,-0.6083547873277161,3.071774166484833,-4.3935}, {2,2252,3035,-0.6083547873277161,3.071774166484833,-4.3905}, {2,2253,3034,-0.6112163281854192,3.0708732869592055,-4.3935}, {2,2253,3035,-0.6112163281854192,3.0708732869592055,-4.3905}, {3,1586,4759,1.2380609210318052,3.0158397134633623,0.8055}, {3,1586,4760,1.2380609210318052,3.0158397134633623,0.8085}, {3,1586,4761,1.2380609210318052,3.0158397134633623,0.8115}, {3,1587,4759,1.2350724503329138,3.016102473585655,0.8055}, {3,1587,4760,1.2350724503329138,3.016102473585655,0.8085}, {3,1587,4761,1.2350724503329138,3.016102473585655,0.8115}, {2,5410,3236,-0.7569171385102857,-3.058144093152505,-3.7875}, {2,5410,3237,-0.7569171385102857,-3.058144093152505,-3.7845}, {2,5411,3236,-0.7539286678113943,-3.0584068532747977,-3.7875}, {2,5411,3237,-0.7539286678113943,-3.0584068532747977,-3.7845}, {2,3612,5998,-3.0670779373104606,0.6553091347479753,4.5615000000000006}, {2,3613,5997,-3.0673406974327535,0.652320664049084,4.5585}, {2,3613,5998,-3.0673406974327535,0.652320664049084,4.5615000000000006}, {2,3613,5999,-3.0673406974327535,0.652320664049084,4.564500000000001}, {2,3614,5997,-3.0676034575550464,0.6493321933501924,4.5585}, {2,3614,5998,-3.0676034575550464,0.6493321933501924,4.5615000000000006}, {2,3614,5999,-3.0676034575550464,0.6493321933501924,4.564500000000001}, {3,3701,1049,-3.4177119043259023,0.49047690203030586,-10.3905}, {3,3701,1050,-3.4177119043259023,0.49047690203030586,-10.3875}, {3,3701,1051,-3.4177119043259023,0.49047690203030586,-10.3845}, {3,3702,1049,-3.4168110248002743,0.48761536117260257,-10.3905}, {3,3702,1050,-3.4168110248002743,0.48761536117260257,-10.3875}, {3,3702,1051,-3.4168110248002743,0.48761536117260257,-10.3845}, {3,3703,1049,-3.4159101452746468,0.4847538203148995,-10.3905}, {3,3703,1050,-3.4159101452746468,0.4847538203148995,-10.3875}, {3,3703,1051,-3.4159101452746468,0.4847538203148995,-10.3845}, {3,3715,1054,-3.4050995909671133,0.45041533002246126,-10.3755}, {3,3715,1055,-3.4050995909671133,0.45041533002246126,-10.3725}, {3,3716,1053,-3.4041987114414853,0.4475537891647581,-10.3785}, {3,3716,1054,-3.4041987114414853,0.4475537891647581,-10.3755}, {3,3716,1055,-3.4041987114414853,0.4475537891647581,-10.3725}, {3,3717,1054,-3.4032978319158578,0.4446922483070549,-10.3755}, {3,3717,1055,-3.4032978319158578,0.4446922483070549,-10.3725}, {3,1428,3938,1.710239291456652,2.974323614141099,-1.6785}, {3,1428,3939,1.710239291456652,2.974323614141099,-1.6755}, {3,1429,3938,1.7072508207577606,2.9745863742633913,-1.6785}, {3,1429,3939,1.7072508207577606,2.9745863742633913,-1.6755}, {2,6385,4352,1.762852258967646,-2.5839409300470377,-0.4185}, {2,6386,4351,1.7651512263285083,-2.582013561614773,-0.4215}, {2,6386,4352,1.7651512263285083,-2.582013561614773,-0.4185}, {2,6386,4353,1.7651512263285083,-2.582013561614773,-0.41550000000000004}, {2,6387,4351,1.7674501936893705,-2.5800861931825083,-0.4215}, {2,6387,4352,1.7674501936893705,-2.5800861931825083,-0.4185}, {2,6387,4353,1.7674501936893705,-2.5800861931825083,-0.41550000000000004}, {2,7255,3659,3.0615599747423112,-0.7180670194246972,-2.5155000000000003}, {2,7255,3660,3.0615599747423112,-0.7180670194246972,-2.5125}, {2,7256,3658,3.061822734864604,-0.7150785487258059,-2.5185}, {2,7256,3659,3.061822734864604,-0.7150785487258059,-2.5155000000000003}, {2,7256,3660,3.061822734864604,-0.7150785487258059,-2.5125}, {2,7257,3659,3.062085494986897,-0.7120900780269143,-2.5155000000000003}, {2,7257,3660,3.062085494986897,-0.7120900780269143,-2.5125}, {2,1742,3753,0.7688710213058496,3.0570930526633333,-2.2335000000000003}, {2,1742,3754,0.7688710213058496,3.0570930526633333,-2.2305}, {2,1743,3753,0.7658825506069582,3.057355812785626,-2.2335000000000003}, {2,1743,3754,0.7658825506069582,3.057355812785626,-2.2305}, {2,2077,2456,-0.10758513722965933,3.2294280834696956,-6.1485}, {2,2077,2457,-0.10758513722965933,3.2294280834696956,-6.1455}, {2,2077,2458,-0.10758513722965933,3.2294280834696956,-6.1425}, {2,2078,2456,-0.11044667808736253,3.2285272039440676,-6.1485}, {2,2078,2457,-0.11044667808736253,3.2285272039440676,-6.1455}, {2,2078,2458,-0.11044667808736253,3.2285272039440676,-6.1425}, {3,3720,1042,-3.400595193338974,0.4361076257339453,-10.4115}, {3,3720,1043,-3.400595193338974,0.4361076257339453,-10.4085}, {3,3720,1044,-3.400595193338974,0.4361076257339453,-10.4055}, {3,3720,1045,-3.400595193338974,0.4361076257339453,-10.4025}, {3,3721,1042,-3.3996943138133466,0.4332460848762421,-10.4115}, {3,3721,1043,-3.3996943138133466,0.4332460848762421,-10.4085}, {3,3721,1044,-3.3996943138133466,0.4332460848762421,-10.4055}, {3,3721,1045,-3.3996943138133466,0.4332460848762421,-10.4025}, {3,3722,1044,-3.3987934342877186,0.43038454401853893,-10.4055}, {2,400,2953,3.0897917569973887,0.5511239701736527,-4.6545000000000005}, {2,400,2954,3.0897917569973887,0.5511239701736527,-4.6515}, {2,401,2953,3.088890877471761,0.5539855110313558,-4.6545000000000005}, {2,401,2954,3.088890877471761,0.5539855110313558,-4.6515}, {2,402,2953,3.087989997946133,0.556847051889059,-4.6545000000000005}, {2,402,2954,3.087989997946133,0.556847051889059,-4.6515}, {3,5625,4157,-0.2272151431216133,-3.334830987968146,-1.0035}, {3,5625,4158,-0.2272151431216133,-3.334830987968146,-1.0005}, {3,5625,4159,-0.2272151431216133,-3.334830987968146,-0.9974999999999999}, {3,5626,4157,-0.22435360226391013,-3.333930108442518,-1.0035}, {3,5626,4158,-0.22435360226391013,-3.333930108442518,-1.0005}, {3,5626,4159,-0.22435360226391013,-3.333930108442518,-0.9974999999999999}, {3,542,3954,3.254665144475182,0.9628116173876392,-1.6305}, {3,542,3955,3.254665144475182,0.9628116173876392,-1.6275}, {3,542,3956,3.254665144475182,0.9628116173876392,-1.6245}, {3,543,3954,3.2527377760429177,0.9651105847485013,-1.6305}, {3,543,3955,3.2527377760429177,0.9651105847485013,-1.6275}, {3,543,3956,3.2527377760429177,0.9651105847485013,-1.6245}, {3,544,3955,3.2508104076106528,0.9674095521093634,-1.6275}, {2,4103,1263,-3.0546574554979053,-0.6627240636240764,-9.7485}, {2,4103,1264,-3.0546574554979053,-0.6627240636240764,-9.7455}, {2,4104,1262,-3.053756575972278,-0.6655856044817795,-9.7515}, {2,4104,1263,-3.053756575972278,-0.6655856044817795,-9.7485}, {2,4104,1264,-3.053756575972278,-0.6655856044817795,-9.7455}, {2,4105,1262,-3.05285569644665,-0.6684471453394828,-9.7515}, {2,4105,1263,-3.05285569644665,-0.6684471453394828,-9.7485}, {2,4105,1264,-3.05285569644665,-0.6684471453394828,-9.7455}, {3,5232,2611,-1.2918533936118528,-3.0111100312620915,-5.6805}, {3,5232,2612,-1.2918533936118528,-3.0111100312620915,-5.6775}, {3,5233,2611,-1.2888649229129614,-3.0113727913843844,-5.6805}, {3,5233,2612,-1.2888649229129614,-3.0113727913843844,-5.6775}, {2,4866,5009,-2.0983985654498802,-2.416466951130026,1.5735000000000001}, {2,4866,5010,-2.0983985654498802,-2.416466951130026,1.5765}, {2,4867,5009,-2.0957381324831523,-2.417853348053547,1.5735000000000001}, {2,4867,5010,-2.0957381324831523,-2.417853348053547,1.5765}, {2,4868,5006,-2.0930776995164244,-2.4192397449770677,1.5645}, {2,4868,5007,-2.0930776995164244,-2.4192397449770677,1.5675000000000001}, {2,4869,5006,-2.0904172665496965,-2.420626141900588,1.5645}, {2,4869,5007,-2.0904172665496965,-2.420626141900588,1.5675000000000001}, {2,4870,5006,-2.0877568335829686,-2.422012538824109,1.5645}, {2,4870,5007,-2.0877568335829686,-2.422012538824109,1.5675000000000001}, {2,4993,5098,-1.7605235786754476,-2.592539360417163,1.8405}, {2,4993,5099,-1.7605235786754476,-2.592539360417163,1.8435000000000001}, {2,4993,5100,-1.7605235786754476,-2.592539360417163,1.8465}, {2,4994,5098,-1.7578631457087197,-2.593925757340684,1.8405}, {2,4994,5099,-1.7578631457087197,-2.593925757340684,1.8435000000000001}, {2,4994,5100,-1.7578631457087197,-2.593925757340684,1.8465}, {2,4995,5099,-1.755202712741992,-2.5953121542642044,1.8435000000000001}, {2,6210,4217,1.3605329708167808,-2.921230405693375,-0.8235}, {2,6210,4218,1.3605329708167808,-2.921230405693375,-0.8205}, {2,6210,4219,1.3605329708167808,-2.921230405693375,-0.8175}, {2,6211,4217,1.362831938177643,-2.91930303726111,-0.8235}, {2,6211,4218,1.362831938177643,-2.91930303726111,-0.8205}, {2,6211,4219,1.362831938177643,-2.91930303726111,-0.8175}, {2,6212,4217,1.365130905538505,-2.917375668828845,-0.8235}, {2,6212,4218,1.365130905538505,-2.917375668828845,-0.8205}, {2,6212,4219,1.365130905538505,-2.917375668828845,-0.8175}, {4,2620,2747,-0.35134245611184595,3.8836087238640347,-5.2725}, {4,2620,2748,-0.35134245611184595,3.8836087238640347,-5.269500000000001}, {4,2620,2749,-0.35134245611184595,3.8836087238640347,-5.266500000000001}, {4,2621,2747,-0.35420846557922275,3.8827221632440505,-5.2725}, {4,2621,2748,-0.35420846557922275,3.8827221632440505,-5.269500000000001}, {4,2621,2749,-0.35420846557922275,3.8827221632440505,-5.266500000000001}, {4,2622,2748,-0.35707447504659956,3.8818356026240664,-5.269500000000001}, {4,2622,2749,-0.35707447504659956,3.8818356026240664,-5.266500000000001}, {5,2814,2692,-0.8845273368907804,4.043096538626733,-5.4375}, {5,2814,2693,-0.8845273368907804,4.043096538626733,-5.4345}, {5,2814,2694,-0.8845273368907804,4.043096538626733,-5.431500000000001}, {5,2815,2692,-0.8869791115723742,4.041367723740547,-5.4375}, {5,2815,2693,-0.8869791115723742,4.041367723740547,-5.4345}, {5,2815,2694,-0.8869791115723742,4.041367723740547,-5.431500000000001}, {5,1945,4929,1.5198890054076268,3.7928423232279145,1.3155000000000001}, {5,1945,4930,1.5198890054076268,3.7928423232279145,1.3185}, {5,1945,4931,1.5198890054076268,3.7928423232279145,1.3215000000000001}, {5,1946,4929,1.516889306129796,3.792884799604647,1.3155000000000001}, {5,1946,4930,1.516889306129796,3.792884799604647,1.3185}, {5,1946,4931,1.516889306129796,3.792884799604647,1.3215000000000001}, {5,1947,4929,1.513889606851965,3.7929272759813792,1.3155000000000001}, {5,1947,4930,1.513889606851965,3.7929272759813792,1.3185}, {5,1947,4931,1.513889606851965,3.7929272759813792,1.3215000000000001}, {4,6687,3013,-1.0309380231211782,-3.799765972635305,-4.4565}, {4,6687,3014,-1.0309380231211782,-3.799765972635305,-4.4535}, {4,6688,3013,-1.0279383238433473,-3.7998084490120374,-4.4565}, {4,6688,3014,-1.0279383238433473,-3.7998084490120374,-4.4535}, {4,4472,6454,-3.8029517008902394,0.8059605772838547,5.9295}, {4,4472,6455,-3.8029517008902394,0.8059605772838547,5.9325}, {4,4472,6456,-3.8029517008902394,0.8059605772838547,5.9355}, {4,4473,6454,-3.8029941772669718,0.8029608780060238,5.9295}, {4,4473,6455,-3.8029941772669718,0.8029608780060238,5.9325}, {4,4473,6456,-3.8029941772669718,0.8029608780060238,5.9355}, {4,4562,707,-3.8067745747961603,0.5359876422790669,-11.4345}, {4,4562,708,-3.8067745747961603,0.5359876422790669,-11.4315}, {4,4562,709,-3.8067745747961603,0.5359876422790669,-11.4285}, {4,4563,707,-3.8068170511728927,0.5329879430012359,-11.4345}, {4,4563,708,-3.8068170511728927,0.5329879430012359,-11.4315}, {4,4563,709,-3.8068170511728927,0.5329879430012359,-11.4285}, {5,4588,383,-4.169967804118873,0.5743786018508666,-12.409500000000001}, {5,4588,384,-4.169967804118873,0.5743786018508666,-12.406500000000001}, {5,4588,385,-4.169967804118873,0.5743786018508666,-12.403500000000001}, {5,4589,383,-4.169081243498888,0.5715125923834897,-12.409500000000001}, {5,4589,384,-4.169081243498888,0.5715125923834897,-12.406500000000001}, {5,4589,385,-4.169081243498888,0.5715125923834897,-12.403500000000001}, {5,4590,384,-4.168194682878904,0.568646582916113,-12.406500000000001}, {5,4590,385,-4.168194682878904,0.568646582916113,-12.403500000000001}, {4,4565,704,-3.806902003926358,0.5269885444455739,-11.4435}, {4,4565,705,-3.806902003926358,0.5269885444455739,-11.4405}, {4,4565,706,-3.806902003926358,0.5269885444455739,-11.4375}, {4,4566,704,-3.8069444803030903,0.523988845167743,-11.4435}, {4,4566,705,-3.8069444803030903,0.523988845167743,-11.4405}, {4,4566,706,-3.8069444803030903,0.523988845167743,-11.4375}, {4,4567,705,-3.8069869566798227,0.520989145889912,-11.4405}, {4,4567,706,-3.8069869566798227,0.520989145889912,-11.4375}, {4,1725,3916,1.938851005642172,3.3687338366001898,-1.7445}, {4,1725,3917,1.938851005642172,3.3687338366001898,-1.7415}, {4,1726,3916,1.9360112480193348,3.369701192089934,-1.7445}, {4,1726,3917,1.9360112480193348,3.369701192089934,-1.7415}, {5,7955,4425,2.2757679679934792,-3.3244897372684363,-0.1995}, {5,7955,4426,2.2757679679934792,-3.3244897372684363,-0.1965}, {5,7956,4425,2.2775655111009367,-3.322087896562471,-0.1995}, {5,7956,4426,2.2775655111009367,-3.322087896562471,-0.1965}, {5,7957,4425,2.2793630542083942,-3.3196860558565056,-0.1995}, {5,7957,4426,2.2793630542083942,-3.3196860558565056,-0.1965}, {4,9033,3553,3.802144649732323,-0.8629548635626437,-2.8335}, {4,9033,3554,3.802144649732323,-0.8629548635626437,-2.8305000000000002}, {4,9034,3553,3.802187126109055,-0.8599551642848127,-2.8335}, {4,9034,3554,3.802187126109055,-0.8599551642848127,-2.8305000000000002}, {4,2123,3667,0.9829428346758822,3.8004455946630245,-2.4915000000000003}, {4,2123,3668,0.9829428346758822,3.8004455946630245,-2.4885}, {4,2124,3667,0.9799431353980511,3.800488071039757,-2.4915000000000003}, {4,2124,3668,0.9799431353980511,3.800488071039757,-2.4885}, {4,2555,2090,-0.16505184073235268,3.941235164162996,-7.2465}, {4,2555,2091,-0.16505184073235268,3.941235164162996,-7.2435}, {4,2556,2089,-0.1679178501997295,3.9403486035430118,-7.2495}, {4,2556,2090,-0.1679178501997295,3.9403486035430118,-7.2465}, {4,2556,2091,-0.1679178501997295,3.9403486035430118,-7.2435}, {4,2557,2090,-0.17078385966710632,3.9394620429230276,-7.2465}, {4,2557,2091,-0.17078385966710632,3.9394620429230276,-7.2435}, {4,4574,678,-3.80728429131695,0.4999912509450952,-11.5215}, {4,4574,679,-3.80728429131695,0.4999912509450952,-11.518500000000001}, {4,4574,680,-3.80728429131695,0.4999912509450952,-11.515500000000001}, {4,4574,681,-3.80728429131695,0.4999912509450952,-11.512500000000001}, {4,4575,678,-3.807326767693682,0.49699155166726405,-11.5215}, {4,4575,679,-3.807326767693682,0.49699155166726405,-11.518500000000001}, {4,4575,680,-3.807326767693682,0.49699155166726405,-11.515500000000001}, {4,4575,681,-3.807326767693682,0.49699155166726405,-11.512500000000001}, {5,4594,355,-4.1646484403989685,0.5571825450466057,-12.493500000000001}, {5,4594,356,-4.1646484403989685,0.5571825450466057,-12.4905}, {5,4594,357,-4.1646484403989685,0.5571825450466057,-12.4875}, {5,4594,358,-4.1646484403989685,0.5571825450466057,-12.4845}, {5,4595,355,-4.163761879778984,0.5543165355792288,-12.493500000000001}, {5,4595,356,-4.163761879778984,0.5543165355792288,-12.4905}, {5,4595,357,-4.163761879778984,0.5543165355792288,-12.4875}, {5,4595,358,-4.163761879778984,0.5543165355792288,-12.4845}, {5,4596,356,-4.162875319159,0.5514505261118521,-12.4905}, {5,4596,357,-4.162875319159,0.5514505261118521,-12.4875}, {5,4596,358,-4.162875319159,0.5514505261118521,-12.4845}, {4,435,2689,3.7905198587657125,0.652273450186412,-5.4465}, {4,435,2690,3.7905198587657125,0.652273450186412,-5.4435}, {4,435,2691,3.7905198587657125,0.652273450186412,-5.4405}, {4,436,2689,3.7896332981457284,0.6551394596537887,-5.4465}, {4,436,2690,3.7896332981457284,0.6551394596537887,-5.4435}, {4,436,2691,3.7896332981457284,0.6551394596537887,-5.4405}, {5,6972,4172,-0.304973711917446,-4.086631105840374,-0.9585}, {5,6972,4173,-0.304973711917446,-4.086631105840374,-0.9555}, {5,6972,4174,-0.304973711917446,-4.086631105840374,-0.9525}, {5,6973,4172,-0.3021077024500691,-4.085744545220391,-0.9585}, {5,6973,4173,-0.3021077024500691,-4.085744545220391,-0.9555}, {5,6973,4174,-0.3021077024500691,-4.085744545220391,-0.9525}, {5,637,3926,3.8477404564877817,1.161577875910866,-1.7145000000000001}, {5,637,3927,3.8477404564877817,1.161577875910866,-1.7115}, {5,637,3928,3.8477404564877817,1.161577875910866,-1.7085000000000001}, {5,638,3926,3.8460116416015966,1.1640296505924594,-1.7145000000000001}, {5,638,3927,3.8460116416015966,1.1640296505924594,-1.7115}, {5,638,3928,3.8460116416015966,1.1640296505924594,-1.7085000000000001}, {5,5098,335,-4.053469427943845,-0.8698166888012182,-12.5535}, {5,5098,336,-4.053469427943845,-0.8698166888012182,-12.550500000000001}, {5,5098,337,-4.053469427943845,-0.8698166888012182,-12.547500000000001}, {5,5099,335,-4.051740613057659,-0.872268463482812,-12.5535}, {5,5099,336,-4.051740613057659,-0.872268463482812,-12.550500000000001}, {5,5099,337,-4.051740613057659,-0.872268463482812,-12.547500000000001}, {5,5100,336,-4.050011798171474,-0.8747202381644056,-12.550500000000001}, {5,5100,337,-4.050011798171474,-0.8747202381644056,-12.547500000000001}, {5,6503,2231,-1.5858823895199088,-3.7919078429398003,-6.8235}, {5,6503,2232,-1.5858823895199088,-3.7919078429398003,-6.8205}, {5,6504,2231,-1.5828826902420778,-3.7919503193165327,-6.8235}, {5,6504,2232,-1.5828826902420778,-3.7919503193165327,-6.8205}, {5,6031,5275,-2.7197843519224065,-3.1027110769205786,2.3715}, {5,6031,5276,-2.7197843519224065,-3.1027110769205786,2.3745000000000003}, {5,6031,5277,-2.7197843519224065,-3.1027110769205786,2.3775000000000004}, {5,6032,5275,-2.7169445942995694,-3.1036784324103226,2.3715}, {5,6032,5276,-2.7169445942995694,-3.1036784324103226,2.3745000000000003}, {5,6032,5277,-2.7169445942995694,-3.1036784324103226,2.3775000000000004}, {4,7699,4241,1.6347703894584444,-3.514079183454,-0.7515}, {4,7699,4242,1.6347703894584444,-3.514079183454,-0.7484999999999999}, {4,7699,4243,1.6347703894584444,-3.514079183454,-0.7454999999999999}, {4,7700,4241,1.637222164140038,-3.5123503685678146,-0.7515}, {4,7700,4242,1.637222164140038,-3.5123503685678146,-0.7484999999999999}, {4,7700,4243,1.637222164140038,-3.5123503685678146,-0.7454999999999999}};
    
    struct Node input[MAX];
    struct Node output[MAX];
    int adj[MAX][MAX];
    int marked[MAX];
    int rootIndex[MAX];
    int num_layers = 3;
    int layer_cnt[num_layers * 2];
    int layer_begin_idx[num_layers * 2 + 1];
    // (2, 1000)
    int** edge_pair = new int*[1000];
    
    initialize(keys, input, output, adj, marked, rootIndex, layer_cnt, layer_begin_idx, edge_pair, num_layers);
    
    getAdjancyMatrix(adj, input, MAX);
    getAdjancyList(adj, input, MAX);
    getCluster(output, rootIndex, input, adj, marked, MAX);
    
    int expected[MAX] = {0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 14, 14, 14, 14, 14, 19, 19, 19, 19, 19, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 35, 35, 35, 35, 39, 39, 39, 39, 39, 39, 45, 45, 45, 45, 45, 45, 51, 51, 51, 51, 51, 51, 57, 57, 57, 57, 57, 57, 63, 63, 63, 63, 63, 63, 63, 63, 71, 71, 71, 71, 71, 71, 77, 77, 77, 77, 77, 77, 83, 83, 83, 83, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 100, 100, 100, 100, 100, 100, 100, 100, 108, 108, 108, 108, 108, 108, 114, 114, 114, 114, 114, 114, 114, 121, 121, 121, 121, 121, 121, 121, 121, 129, 129, 129, 129, 133, 133, 133, 133, 133, 133, 139, 139, 139, 139, 143, 143, 143, 143, 143, 143, 143, 150, 150, 150, 150, 150, 150, 150, 150, 150, 159, 159, 159, 159, 159, 159, 159, 166, 166, 166, 166, 170, 170, 170, 170, 170, 170, 170, 177, 177, 177, 177, 177, 177, 177, 184, 184, 184, 184, 188, 188, 188, 188, 188, 188, 194, 194, 194, 194, 194, 194, 194, 194, 194, 203, 203, 203, 203, 203, 203, 209, 209, 209, 209, 209, 209, 215, 215, 215, 215, 215, 215, 215, 222, 222, 222, 222, 222, 222, 222, 222, 230, 230, 230, 230, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 244, 244, 244, 244, 244, 244, 244, 251, 251, 251, 251, 251, 251, 251, 251, 251, 260, 260, 260, 260, 260, 260, 260, 260, 268, 268, 268, 268, 268, 268, 274, 274, 274, 274, 274, 274, 274, 274, 274, 283, 283, 283, 283, 287, 287, 287, 287, 287, 287, 293, 293, 293, 293, 293, 293, 299, 299, 299, 299, 299, 299, 299, 299, 293, 293, 293, 293, 293, 293, 293, 293, 315, 315, 315, 315, 319, 319, 319, 319, 319, 319, 325, 325, 325, 325, 329, 329, 329, 329, 333, 333, 333, 333, 333, 333, 333, 340, 340, 340, 340, 340, 340, 340, 340, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 359, 359, 359, 359, 359, 359, 365, 365, 365, 365, 365, 365, 371, 371, 371, 371, 371, 371, 377, 377, 377, 377, 377, 377, 377, 377, 385, 385, 385, 385, 389, 389, 389, 389, 389, 389, 395, 395, 395, 395, 395, 395};
    
    compare(expected, marked);
    
    int num_clusters = 0;
    for (int i = 0; i < MAX; i++, num_clusters++) {
        if (rootIndex[i] == -1)
            break;
    }
    getClusteredNodes(output, rootIndex, MAX, num_layers*2);
    
    sortByLayer(output, layer_begin_idx, layer_cnt, num_layers*2, num_clusters);
    resetNodeIndex(output, num_clusters);
    
    int num_edge_pairs = getEdgeIndex(edge_pair, output, layer_begin_idx, num_layers);
    printEdgePairs(edge_pair, num_edge_pairs);

    featureScale(output, num_clusters);
    printNodesWithSelectedFeatures(output, num_clusters);
    
    printf("\nThe End.");
    
    return 0;
}
