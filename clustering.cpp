#include <iostream>
#include <cmath>
#define MAX 14
struct Node {
    int id;
    int layer_id;
    int phi_index;
    int z_index;
};
struct Node temp;
void printNode(struct Node input) {
    printf("\n(%d, %d, %d, %d) ", input.id, input.layer_id, input.phi_index, input.z_index);
}
void printIntArray(int* input) {
    for(int i = 0; i < MAX;i++) {
        printf("%d ", input[i]);
    }
}
void printNodeArray(struct Node* input) {
    for(int i = 0; i < MAX;i++) {
        printNode(input[i]);
    }
}
void printNodeMatrix(struct Node** input) {
    for(int i = 0; i < MAX; i++) {
        printf("----");
        printNodeArray(input[i]);
    }
}
void printIntMatrix(int input[MAX][MAX]) {
    for(int i = 0; i < MAX; i++) {
        printf("\n");
        for(int j = 0; j < MAX; j++) {
            printf("%d ", input[i][j]);
        }
    }
}
void copyNode(struct Node* nodeTo, struct Node nodeFrom) {
   nodeTo->id = nodeFrom.id;
   nodeTo->layer_id = nodeFrom.layer_id;
   nodeTo->phi_index = nodeFrom.phi_index;
   nodeTo->z_index = nodeFrom.z_index;
}
void swapNode(struct Node* nodes, int i, int j) {
  copyNode(&temp, nodes[i]);
  copyNode(&(nodes[i]), nodes[j]);
  copyNode(&(nodes[j]), temp);
}
void getAdjancyMatrix(int adjMatrix[MAX][MAX], struct Node* input) {
    for (int i = 0; i < MAX; i++) {
        struct Node node_iter_i;
        copyNode(&node_iter_i, input[i]);
        struct Node node_iter_j;
        for (int j = 0; j < MAX; j++) {
            if (i == j)
                continue;
            copyNode(&node_iter_j, input[j]);
            if (node_iter_i.layer_id == node_iter_j.layer_id
                && abs(node_iter_i.phi_index - node_iter_j.phi_index) <= 2
                && abs(node_iter_i.z_index - node_iter_j.z_index) <= 2) {
                adjMatrix[i][j] = 1;
            }
        }
    }
}
void getAdjancyList(int adjList[MAX][MAX], int adjMatrix[MAX][MAX], struct Node* input) {
    int adjListIndex[MAX] = {0,0,0,0,0,0,0,0};
    for (int i = 0; i < MAX; i++) {
        for (int j = 0; j < MAX; j++) {
            if (adjMatrix[i][j] == 1)
                adjList[i][adjListIndex[i]++] = j;
        }
    }
}
int appendNeighbour(struct Node output[MAX], struct Node input[MAX], int adjList[MAX][MAX], int marked[MAX], int i_node, int i_next) {
    for (int i = 0; i < MAX ; i++) {
        int idx = adjList[i_node][i];
        if (idx == -1)
            break;
        if (marked[idx] == -1) {
            marked[idx] = marked[i_node];
            // printf("\n - Add neighbour %d at %d", idx, i_next);
            copyNode(&(output[i_next++]), input[idx]);
        }
    }
    return i_next;
}
// O(|E|)
void getCluster(struct Node output[MAX], struct Node input[MAX], int adjList[MAX][MAX], int marked[MAX]) {
    int ptr_cluster = 0;
    int ptr_cluster_queue = 0;
    int ptr_next = 0;
    while (ptr_cluster < MAX) {
        // printf("\n Loop at %d", ptr_cluster);
        if (marked[ptr_cluster] == -1) {
            // printf("\n - Node %d is cluster parent", ptr_cluster);
            marked[ptr_cluster] = ptr_cluster;
            copyNode(&(output[ptr_next++]), input[ptr_cluster]);
            ptr_next = appendNeighbour(output, input, adjList, marked, ptr_cluster, ptr_next);
            // printf("\n");
            // printIntArray(marked);
            ptr_cluster_queue = ptr_cluster + 1;
            while (output[ptr_cluster_queue].id != -1) {
                // printf("\n - Iteraste on Node %d", output[ptr_cluster_queue].id);
                ptr_next = appendNeighbour(output, input, adjList, marked, output[ptr_cluster_queue].id, ptr_next);
                ptr_cluster_queue++;
                // printf("\n");
                // printIntArray(marked);
            }
        }
        ptr_cluster++;
    }
}
void initialize(int keys[MAX][3], struct Node input[MAX], struct Node output[MAX], int adjMatrix[MAX][MAX],  int adjList[MAX][MAX], int marked[MAX]) {
    
    for (int i = 0; i < MAX; i++) {
        input[i].id = i;
        input[i].layer_id = keys[i][0];
        input[i].phi_index = keys[i][1];
        input[i].z_index = keys[i][2];
        output[i].id = -1;
        output[i].layer_id = -1;
        output[i].phi_index = 0;
        output[i].z_index = 0;
        marked[i] = -1;
        for (int j = 0; j < MAX; j++) {
            adjMatrix[i][j] = 0;
            adjList[i][j] = -1;
        }
    }
}
void compare(int expected[MAX], int marked[MAX]) {
    printf("\nDifferences: ");
    for (int i = 0; i < MAX; i++) {
        if (expected[i] != marked[i])
            printf("%d ", i);
    }
}

int main() {
    // ----------
    // Test Case 1: line
    // Set MAX = 8
    // 0-2-1-4-6
    // 3-7
    // 5
    // int keys[MAX][3] = {{0, 0, 0}, {0, 3, 3}, {0, 1, 1}, {0, 10, 8}, {0, 5, 5}, {0, 11, 18}, {0, 7, 7}, {0, 12, 10}};
    // ----------
    // Test Case 2: Tree
    // Set MAX = 8
    // 4-1-2-6
    //   | |
    //   0 3-7
    // 5
    // int keys[MAX][3] = {{0, 4, 1}, {0, 3, 3}, {0, 5, 5}, {0, 7, 3}, {0, 1, 3}, {0, 12, 9}, {0, 3, 7}, {0, 9, 3}};
    // ----------
    // Test Case 3: Tree
    // Set MAX = 8
    // 0-1-2
    // |\|/
    // 3-4
    //   5
    //  /|
    // 6-7
    // int keys[MAX][3] = {{0, 0, 0}, {0, 14, 10}, {0, 0, 2}, {0, 0, 4}, {0, 2, 2}, {0, 12, 10}, {0, 14, 12}, {0, 2, 0}};
    // ----------
    // Test Case 4
    // Set MAX = 401
    // int keys[MAX][3] = {
    //     {0, 1675, 3266}, {0, 1675, 3267}, {0, 1676, 3266}, {0, 1676, 3267}, {0, 1729, 3295}, {0, 1729, 3296}, {0, 1729, 3297}, {0, 1730, 3295}, {0, 1730, 3296}, {0, 1730, 3297},
    //     {0, 1226, 4581}, {0, 1226, 4582}, {0, 1227, 4581}, {0, 1227, 4582}, {0, 4120, 3450}, {0, 4120, 3451}, {0, 4121, 3450}, {0, 4121, 3451}, {0, 4121, 3452}, {1, 2760, 5737},
    //     {1, 2760, 5738}, {1, 2760, 5739}, {1, 2761, 5737}, {1, 2761, 5738}, {1, 2761, 5739}, {1, 5254, 8048}, {1, 5254, 8049}, {1, 5254, 8050}, {1, 5254, 8051}, {1, 5254, 8052},
    //     {1, 5255, 8048}, {1, 5255, 8049}, {1, 5255, 8050}, {1, 5255, 8051}, {1, 5255, 8052}, {1, 1126, 3985}, {1, 1126, 3986}, {1, 1127, 3985}, {1, 1127, 3986}, {0, 4850, 4294},
    //     {0, 4850, 4295}, {0, 4851, 4294}, {0, 4851, 4295}, {0, 4852, 4294}, {0, 4852, 4295}, {0, 5477, 3770}, {0, 5477, 3771}, {0, 5478, 3770}, {0, 5478, 3771}, {0, 5479, 3770},
    //     {0, 5479, 3771}, {0, 1354, 3842}, {0, 1354, 3843}, {0, 1355, 3842}, {0, 1355, 3843}, {0, 1356, 3842}, {0, 1356, 3843}, {1, 1601, 2858}, {1, 1601, 2859}, {1, 1601, 2860},
    //     {1, 1602, 2858}, {1, 1602, 2859}, {1, 1602, 2860}, {1, 2848, 1804}, {1, 2848, 1805}, {1, 2848, 1806}, {1, 2849, 1804}, {1, 2849, 1805}, {1, 2849, 1806}, {1, 2850, 1805},
    //     {1, 2850, 1806}, {0, 359, 3232}, {0, 359, 3233}, {0, 360, 3232}, {0, 360, 3233}, {0, 361, 3232}, {0, 361, 3233}, {1, 4277, 4143}, {1, 4277, 4144}, {1, 4278, 4143}, 
    //     {1, 4278, 4144}, {1, 4279, 4143}, {1, 4279, 4144}, {0, 433, 3994}, {0, 433, 3995}, {0, 434, 3994}, {0, 434, 3995}, {0, 2235, 417}, {0, 2235, 418}, {0, 2235, 419}, 
    //     {0, 2235, 420}, {0, 2236, 416}, {0, 2236, 417}, {0, 2236, 418}, {0, 2236, 419}, {0, 2236, 420}, {0, 2237, 417}, {0, 2237, 418}, {0, 2237, 419}, {0, 2237, 420}, 
    //     {0, 3132, 1957}, {0, 3132, 1958}, {0, 3132, 1959}, {0, 3132, 1960}, {0, 3133, 1957}, {0, 3133, 1958}, {0, 3133, 1959}, {0, 3133, 1960}, {0, 3962, 3006}, {0, 3962, 3007}, 
    //     {0, 3962, 3008}, {0, 3963, 3006}, {0, 3963, 3007}, {0, 3963, 3008}, {1, 3697, 4862}, {1, 3697, 4863}, {1, 3698, 4861}, {1, 3698, 4862}, {1, 3698, 4863}, {1, 3699, 4862}, 
    //     {1, 3699, 4863}, {1, 4712, 4192}, {1, 4712, 4193}, {1, 4712, 4194}, {1, 4713, 4192}, {1, 4713, 4193}, {1, 4713, 4194}, {1, 4714, 4192}, {1, 4714, 4193}, {2, 2252, 3034}, 
    //     {2, 2252, 3035}, {2, 2253, 3034}, {2, 2253, 3035}, {3, 1586, 4759}, {3, 1586, 4760}, {3, 1586, 4761}, {3, 1587, 4759}, {3, 1587, 4760}, {3, 1587, 4761}, {2, 5410, 3236}, 
    //     {2, 5410, 3237}, {2, 5411, 3236}, {2, 5411, 3237}, {2, 3612, 5998}, {2, 3613, 5997}, {2, 3613, 5998}, {2, 3613, 5999}, {2, 3614, 5997}, {2, 3614, 5998}, {2, 3614, 5999}, 
    //     {3, 3701, 1049}, {3, 3701, 1050}, {3, 3701, 1051}, {3, 3702, 1049}, {3, 3702, 1050}, {3, 3702, 1051}, {3, 3703, 1049}, {3, 3703, 1050}, {3, 3703, 1051}, {3, 3715, 1054}, 
    //     {3, 3715, 1055}, {3, 3716, 1053}, {3, 3716, 1054}, {3, 3716, 1055}, {3, 3717, 1054}, {3, 3717, 1055}, {3, 1428, 3938}, {3, 1428, 3939}, {3, 1429, 3938}, {3, 1429, 3939}, 
    //     {2, 6385, 4352}, {2, 6386, 4351}, {2, 6386, 4352}, {2, 6386, 4353}, {2, 6387, 4351}, {2, 6387, 4352}, {2, 6387, 4353}, {2, 7255, 3659}, {2, 7255, 3660}, {2, 7256, 3658}, 
    //     {2, 7256, 3659}, {2, 7256, 3660}, {2, 7257, 3659}, {2, 7257, 3660}, {2, 1742, 3753}, {2, 1742, 3754}, {2, 1743, 3753}, {2, 1743, 3754}, {2, 2077, 2456}, {2, 2077, 2457}, 
    //     {2, 2077, 2458}, {2, 2078, 2456}, {2, 2078, 2457}, {2, 2078, 2458}, {3, 3720, 1042}, {3, 3720, 1043}, {3, 3720, 1044}, {3, 3720, 1045}, {3, 3721, 1042}, {3, 3721, 1043}, 
    //     {3, 3721, 1044}, {3, 3721, 1045}, {3, 3722, 1044}, {2, 400, 2953}, {2, 400, 2954}, {2, 401, 2953}, {2, 401, 2954}, {2, 402, 2953}, {2, 402, 2954}, {3, 5625, 4157}, 
    //     {3, 5625, 4158}, {3, 5625, 4159}, {3, 5626, 4157}, {3, 5626, 4158}, {3, 5626, 4159}, {3, 542, 3954}, {3, 542, 3955}, {3, 542, 3956}, {3, 543, 3954}, {3, 543, 3955}, 
    //     {3, 543, 3956}, {3, 544, 3955}, {2, 4103, 1263}, {2, 4103, 1264}, {2, 4104, 1262}, {2, 4104, 1263}, {2, 4104, 1264}, {2, 4105, 1262}, {2, 4105, 1263}, {2, 4105, 1264}, 
    //     {3, 5232, 2611}, {3, 5232, 2612}, {3, 5233, 2611}, {3, 5233, 2612}, {2, 4866, 5009}, {2, 4866, 5010}, {2, 4867, 5009}, {2, 4867, 5010}, {2, 4868, 5006}, {2, 4868, 5007}, 
    //     {2, 4869, 5006}, {2, 4869, 5007}, {2, 4870, 5006}, {2, 4870, 5007}, {2, 4993, 5098}, {2, 4993, 5099}, {2, 4993, 5100}, {2, 4994, 5098}, {2, 4994, 5099}, {2, 4994, 5100}, 
    //     {2, 4995, 5099}, {2, 6210, 4217}, {2, 6210, 4218}, {2, 6210, 4219}, {2, 6211, 4217}, {2, 6211, 4218}, {2, 6211, 4219}, {2, 6212, 4217}, {2, 6212, 4218}, {2, 6212, 4219}, 
    //     {4, 2620, 2747}, {4, 2620, 2748}, {4, 2620, 2749}, {4, 2621, 2747}, {4, 2621, 2748}, {4, 2621, 2749}, {4, 2622, 2748}, {4, 2622, 2749}, {5, 2814, 2692}, {5, 2814, 2693}, 
    //     {5, 2814, 2694}, {5, 2815, 2692}, {5, 2815, 2693}, {5, 2815, 2694}, {5, 1945, 4929}, {5, 1945, 4930}, {5, 1945, 4931}, {5, 1946, 4929}, {5, 1946, 4930}, {5, 1946, 4931}, 
    //     {5, 1947, 4929}, {5, 1947, 4930}, {5, 1947, 4931}, {4, 6687, 3013}, {4, 6687, 3014}, {4, 6688, 3013}, {4, 6688, 3014}, {4, 4472, 6454}, {4, 4472, 6455}, {4, 4472, 6456}, 
    //     {4, 4473, 6454}, {4, 4473, 6455}, {4, 4473, 6456}, {4, 4562, 707}, {4, 4562, 708}, {4, 4562, 709}, {4, 4563, 707}, {4, 4563, 708}, {4, 4563, 709}, {5, 4588, 383}, 
    //     {5, 4588, 384}, {5, 4588, 385}, {5, 4589, 383}, {5, 4589, 384}, {5, 4589, 385}, {5, 4590, 384}, {5, 4590, 385}, {4, 4565, 704}, {4, 4565, 705}, {4, 4565, 706}, 
    //     {4, 4566, 704}, {4, 4566, 705}, {4, 4566, 706}, {4, 4567, 705}, {4, 4567, 706}, {4, 1725, 3916}, {4, 1725, 3917}, {4, 1726, 3916}, {4, 1726, 3917}, {5, 7955, 4425}, 
    //     {5, 7955, 4426}, {5, 7956, 4425}, {5, 7956, 4426}, {5, 7957, 4425}, {5, 7957, 4426}, {4, 9033, 3553}, {4, 9033, 3554}, {4, 9034, 3553}, {4, 9034, 3554}, {4, 2123, 3667}, 
    //     {4, 2123, 3668}, {4, 2124, 3667}, {4, 2124, 3668}, {4, 2555, 2090}, {4, 2555, 2091}, {4, 2556, 2089}, {4, 2556, 2090}, {4, 2556, 2091}, {4, 2557, 2090}, {4, 2557, 2091}, 
    //     {4, 4574, 678}, {4, 4574, 679}, {4, 4574, 680}, {4, 4574, 681}, {4, 4575, 678}, {4, 4575, 679}, {4, 4575, 680}, {4, 4575, 681}, {5, 4594, 355}, {5, 4594, 356}, 
    //     {5, 4594, 357}, {5, 4594, 358}, {5, 4595, 355}, {5, 4595, 356}, {5, 4595, 357}, {5, 4595, 358}, {5, 4596, 356}, {5, 4596, 357}, {5, 4596, 358}, {4, 435, 2689}, 
    //     {4, 435, 2690}, {4, 435, 2691}, {4, 436, 2689}, {4, 436, 2690}, {4, 436, 2691}, {5, 6972, 4172}, {5, 6972, 4173}, {5, 6972, 4174}, {5, 6973, 4172}, {5, 6973, 4173}, 
    //     {5, 6973, 4174}, {5, 637, 3926}, {5, 637, 3927}, {5, 637, 3928}, {5, 638, 3926}, {5, 638, 3927}, {5, 638, 3928}, {5, 5098, 335}, {5, 5098, 336}, {5, 5098, 337}, 
    //     {5, 5099, 335}, {5, 5099, 336}, {5, 5099, 337}, {5, 5100, 336}, {5, 5100, 337}, {5, 6503, 2231}, {5, 6503, 2232}, {5, 6504, 2231}, {5, 6504, 2232}, {5, 6031, 5275}, 
    //     {5, 6031, 5276}, {5, 6031, 5277}, {5, 6032, 5275}, {5, 6032, 5276}, {5, 6032, 5277}, {4, 7699, 4241}, {4, 7699, 4242}, {4, 7699, 4243}, {4, 7700, 4241}, {4, 7700, 4242}, 
    //     {4, 7700, 4243}};
    
    // ----------
    // Test Case 4
    // Set MAX = 14
    int keys[MAX][3] = {
        {4, 4562, 707}, {4, 4562, 708}, {4, 4562, 709}, {4, 4563, 707}, {4, 4563, 708}, {4, 4563, 709}, {4, 4565, 704}, {4, 4565, 705}, {4, 4565, 706}, {4, 4566, 704}, 
        {4, 4566, 705}, {4, 4566, 706}, {4, 4567, 705}, {4, 4567, 706}};
    struct Node input[MAX];
    struct Node output[MAX];
    int adjMatrix[MAX][MAX];
    int adjList[MAX][MAX];
    int marked[MAX];
    initialize(keys, input, output, adjMatrix, adjList, marked);
    // printf("\nInput: ");
    // printNodeArray(input);
    getAdjancyMatrix(adjMatrix, input);
    // printf("\nGet Adjancy Matrix: ");
    // printIntMatrix(adjMatrix);
    getAdjancyList(adjList, adjMatrix, input);
    // printf("\nGet Adjancy List: ");
    // printIntMatrix(adjList);
    getCluster(output, input, adjList, marked);
    // printf("\n\nOutput: ");
    // printNodeArray(output);
    printf("\nCluster ID:");
    printIntArray(marked);
    
    // Output for whole test
    // int expected[MAX] = {0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 10, 10, 10, 10, 14, 14, 14, 14, 14, 19, 19, 19, 19, 19, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 35, 35, 35, 35, 39, 39, 39, 39, 39, 39, 45, 45, 45, 45, 45, 45, 51, 51, 51, 51, 51, 51, 57, 57, 57, 57, 57, 57, 63, 63, 63, 63, 63, 63, 63, 63, 71, 71, 71, 71, 71, 71, 77, 77, 77, 77, 77, 77, 83, 83, 83, 83, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 100, 100, 100, 100, 100, 100, 100, 100, 108, 108, 108, 108, 108, 108, 114, 114, 114, 114, 114, 114, 114, 121, 121, 121, 121, 121, 121, 121, 121, 129, 129, 129, 129, 133, 133, 133, 133, 133, 133, 139, 139, 139, 139, 143, 143, 143, 143, 143, 143, 143, 150, 150, 150, 150, 150, 150, 150, 150, 150, 159, 159, 159, 159, 159, 159, 159, 166, 166, 166, 166, 170, 170, 170, 170, 170, 170, 170, 177, 177, 177, 177, 177, 177, 177, 184, 184, 184, 184, 188, 188, 188, 188, 188, 188, 194, 194, 194, 194, 194, 194, 194, 194, 194, 203, 203, 203, 203, 203, 203, 209, 209, 209, 209, 209, 209, 215, 215, 215, 215, 215, 215, 215, 222, 222, 222, 222, 222, 222, 222, 222, 230, 230, 230, 230, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 244, 244, 244, 244, 244, 244, 244, 251, 251, 251, 251, 251, 251, 251, 251, 251, 260, 260, 260, 260, 260, 260, 260, 260, 268, 268, 268, 268, 268, 268, 274, 274, 274, 274, 274, 274, 274, 274, 274, 283, 283, 283, 283, 287, 287, 287, 287, 287, 287, 293, 293, 293, 293, 293, 293, 299, 299, 299, 299, 299, 299, 299, 299, 307, 307, 307, 307, 307, 307, 307, 307, 315, 315, 315, 315, 319, 319, 319, 319, 319, 319, 325, 325, 325, 325, 329, 329, 329, 329, 333, 333, 333, 333, 333, 333, 333, 340, 340, 340, 340, 340, 340, 340, 340, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 348, 359, 359, 359, 359, 359, 359, 365, 365, 365, 365, 365, 365, 371, 371, 371, 371, 371, 371, 377, 377, 377, 377, 377, 377, 377, 377, 385, 385, 385, 385, 389, 389, 389, 389, 389, 389, 395, 395, 395, 395, 395, 395};
    int expected[MAX] = {0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6};
    
    compare(expected, marked);
    return 0;
}
